#!/usr/bin/env python3

# Copyright 2021 The Mumble Developers. All rights reserved.
# Use of this source code is governed by a BSD-style license
# that can be found in the LICENSE file at the root of the
# Mumble source tree or at <https://www.mumble.info/LICENSE>.


import sys
import os
import argparse
from datetime import datetime

currentDir = os.path.dirname(__file__)
if not currentDir:
    # currentDir is empty - Use local dir
    currentDir = "."

# Make sure that the ProtocolBufferValidation directory is in the path
# of this script. Otherwise the import won't work
sys.path.insert(0, currentDir + os.path.sep + "ProtocolBufferValidation")

from ProtoFile import ProtoFile


def create_disclaimerComment():
    return "// This file was auto-generated by scripts/generate-protobuf-message-validation.py on " + datetime.now().strftime("%Y-%m-%d") + " -- DO NOT EDIT MANUALLY!\n"


def generateValidationFunction(protoMsg, msgNamespace):
    code = "bool isValid(const " + msgNamespace + "::" + protoMsg.name + " &msg) {\n"

    includedValidation = False
    for currentField in protoMsg.messageFields:
        if len(currentField.fieldAnnotations) == 0:
            code += "\t// No validation for field " + currentField.fieldName + "\n"
        else:
            includedValidation = True
            for currentAnnotation in currentField.fieldAnnotations:
                code += "\tif (!"  + currentAnnotation.generateValidCheck(currentField) + ") {\n"
                code += "\t\treturn false;\n"
                code += "\t}\n"

    code += "\n"

    if not includedValidation:
        code += "\t// Mark as unused\n"
        code += "\t(void) msg;\n"
        code += "\n"

    code += "\treturn true;\n"
    code += "}\n"

    return code


def generateHeader(protoFile):
    code = "namespace ProtoValidator {\n"

    for currentMsg in protoFile.messages:
        code += "\tbool isValid(const " + protoFile.package + "::" + currentMsg.name + " &msg);\n"

    code += "}; // namespace ProtoValidator\n"

    return code


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generates the ProtoValidor[.h|.cpp] files")
    parser.add_argument("-i", "--protobuf-spec", help="Path to the ProtoBuf file that contains the message specs", metavar="PATH")
    parser.add_argument("--out-header", help="Path to the file the generated header shall be written to", metavar="PATH")
    parser.add_argument("--out-source", help="Path to the file the generated source shall be written to", metavar="PATH")

    args = parser.parse_args()

    protoFile = ProtoFile.fromFile(args.protobuf_spec)

    if protoFile is None:
        print("[ERROR]: Failed at parsing ProtoFile!")
        sys.exit(1)

    generatedImpl = create_disclaimerComment() + "\n"
    generatedImpl += "#include \"ProtoValidator.h\"\n"
    generatedImpl += "\n"
    generatedImpl += "namespace ProtoValidator {\n"
    generatedImpl += "\n"

    for currentMsg in protoFile.messages:
        generatedImpl += "\t" + generateValidationFunction(currentMsg, protoFile.package).replace("\n", "\n\t").strip() + "\n"
        generatedImpl += "\n"

    generatedImpl += "}; // namespace ProtoValidator\n"

    generatedHeader = create_disclaimerComment() + "\n"
    generatedHeader += "#ifndef MUMBLE_PROTOVALIDATOR_H_\n"
    generatedHeader += "#define MUMBLE_PROTOVALIDATOR_H_\n"
    generatedHeader += "\n"
    generatedHeader += "#include \"Mumble.pb.h\"\n"
    generatedHeader += "\n"
    generatedHeader += generateHeader(protoFile)
    generatedHeader += "\n"
    generatedHeader += "#endif // MUMBLE_PROTOVALIDATOR_H_\n"

    sourceDir = os.path.dirname(args.out_source)
    headerDir = os.path.dirname(args.out_header)

    if not os.path.exists(sourceDir):
        os.makedirs(sourceDir)
    if not os.path.exists(headerDir):
        os.makedirs(headerDir)

    implOutFile = open(args.out_source, "w")
    headerOutFile = open(args.out_header, "w")

    implOutFile.write(generatedImpl)
    headerOutFile.write(generatedHeader)
